pieSize = 200px;
innerCircleSize = pieSize - pieSize / 100 * 20;
offset = (pieSize / 10);

.pieContainer
    height pieSize;
    position relative;

.pieBackground
    position absolute;
    width pieSize;
    height pieSize;
    border-radius pieSize;
    box-shadow 0px 0px 8px rgba(0, 0, 0, 0.5);
    width 0;

.pie
    position absolute;
    width pieSize;
    height pieSize;
    border-radius pieSize;
    clip rect(0px, (pieSize / 2), pieSize, 0px);

.hold
    position absolute;
    width pieSize;
    height pieSize;
    border-radius pieSize;
    clip rect(0px, pieSize, pieSize, (pieSize / 2));

drawPie(pieColors, slices)
    i = 2;
    s = 1;
    offset = (slices[0] / 100) * 360;

    if (sum(slices) < 100)
        lastItem = 100 - sum(slices);
        push(slices, lastItem);
        push(pieColors, #000);

    & :nth-child({i})
        & :nth-child(1)
            background-color pieColors[0];
            angle = (slices[0] / 100) * 360;
            transform rotate(angle * 1deg);

    for color in 2 .. length(pieColors)
        & :nth-child({i + 1})
            transform rotate(offset * 1deg);

            & :nth-child(1)
                background-color pieColors[s];
                angle = (slices[s] / 100) * 360;
                transform rotate(round(angle) * 1deg);

        angle = (slices[s] / 100) * 360;
        offset = round(offset + angle);
        i = i + 1;
        s = s + 1;

.innerCircle
    position absolute;
    width innerCircleSize;
    height innerCircleSize;
    background-color white;
    border-radius 50%;
    top offset;
    left offset;
    box-shadow 0px 0px 8px rgba(0, 0, 0, 0.5) inset;
    color white;
